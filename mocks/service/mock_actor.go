// Code generated by MockGen. DO NOT EDIT.
// Source: internal/http-server/handler/actor.go

// Package mock_handler is a generated GoMock package.
package mock_handler

import (
	context "context"
	reflect "reflect"

	domain "github.com/Max425/film-library.git/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockActorService is a mock of ActorService interface.
type MockActorService struct {
	ctrl     *gomock.Controller
	recorder *MockActorServiceMockRecorder
}

// MockActorServiceMockRecorder is the mock recorder for MockActorService.
type MockActorServiceMockRecorder struct {
	mock *MockActorService
}

// NewMockActorService creates a new mock instance.
func NewMockActorService(ctrl *gomock.Controller) *MockActorService {
	mock := &MockActorService{ctrl: ctrl}
	mock.recorder = &MockActorServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActorService) EXPECT() *MockActorServiceMockRecorder {
	return m.recorder
}

// CreateActor mocks base method.
func (m *MockActorService) CreateActor(ctx context.Context, actor *domain.Actor) (*domain.Actor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateActor", ctx, actor)
	ret0, _ := ret[0].(*domain.Actor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateActor indicates an expected call of CreateActor.
func (mr *MockActorServiceMockRecorder) CreateActor(ctx, actor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateActor", reflect.TypeOf((*MockActorService)(nil).CreateActor), ctx, actor)
}

// DeleteActor mocks base method.
func (m *MockActorService) DeleteActor(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteActor", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteActor indicates an expected call of DeleteActor.
func (mr *MockActorServiceMockRecorder) DeleteActor(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteActor", reflect.TypeOf((*MockActorService)(nil).DeleteActor), ctx, id)
}

// GetActorByID mocks base method.
func (m *MockActorService) GetActorByID(ctx context.Context, id int) (*domain.Actor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActorByID", ctx, id)
	ret0, _ := ret[0].(*domain.Actor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActorByID indicates an expected call of GetActorByID.
func (mr *MockActorServiceMockRecorder) GetActorByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActorByID", reflect.TypeOf((*MockActorService)(nil).GetActorByID), ctx, id)
}

// GetAllActors mocks base method.
func (m *MockActorService) GetAllActors(ctx context.Context) ([]*domain.Actor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllActors", ctx)
	ret0, _ := ret[0].([]*domain.Actor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllActors indicates an expected call of GetAllActors.
func (mr *MockActorServiceMockRecorder) GetAllActors(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllActors", reflect.TypeOf((*MockActorService)(nil).GetAllActors), ctx)
}

// UpdateActor mocks base method.
func (m *MockActorService) UpdateActor(ctx context.Context, actor *domain.Actor) (*domain.Actor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateActor", ctx, actor)
	ret0, _ := ret[0].(*domain.Actor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateActor indicates an expected call of UpdateActor.
func (mr *MockActorServiceMockRecorder) UpdateActor(ctx, actor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateActor", reflect.TypeOf((*MockActorService)(nil).UpdateActor), ctx, actor)
}
