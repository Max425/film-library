// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/film.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	domain "github.com/Max425/film-library.git/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockFilmRepository is a mock of FilmRepository interface.
type MockFilmRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFilmRepositoryMockRecorder
}

// MockFilmRepositoryMockRecorder is the mock recorder for MockFilmRepository.
type MockFilmRepositoryMockRecorder struct {
	mock *MockFilmRepository
}

// NewMockFilmRepository creates a new mock instance.
func NewMockFilmRepository(ctrl *gomock.Controller) *MockFilmRepository {
	mock := &MockFilmRepository{ctrl: ctrl}
	mock.recorder = &MockFilmRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilmRepository) EXPECT() *MockFilmRepositoryMockRecorder {
	return m.recorder
}

// CreateFilm mocks base method.
func (m *MockFilmRepository) CreateFilm(ctx context.Context, film *domain.Film) (*domain.Film, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFilm", ctx, film)
	ret0, _ := ret[0].(*domain.Film)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFilm indicates an expected call of CreateFilm.
func (mr *MockFilmRepositoryMockRecorder) CreateFilm(ctx, film interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFilm", reflect.TypeOf((*MockFilmRepository)(nil).CreateFilm), ctx, film)
}

// DeleteFilm mocks base method.
func (m *MockFilmRepository) DeleteFilm(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFilm", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFilm indicates an expected call of DeleteFilm.
func (mr *MockFilmRepositoryMockRecorder) DeleteFilm(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFilm", reflect.TypeOf((*MockFilmRepository)(nil).DeleteFilm), ctx, id)
}

// FindFilmByID mocks base method.
func (m *MockFilmRepository) FindFilmByID(ctx context.Context, id int) (*domain.Film, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFilmByID", ctx, id)
	ret0, _ := ret[0].(*domain.Film)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFilmByID indicates an expected call of FindFilmByID.
func (mr *MockFilmRepositoryMockRecorder) FindFilmByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFilmByID", reflect.TypeOf((*MockFilmRepository)(nil).FindFilmByID), ctx, id)
}

// GetAllFilms mocks base method.
func (m *MockFilmRepository) GetAllFilms(ctx context.Context, sortBy, order string) ([]*domain.Film, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllFilms", ctx, sortBy, order)
	ret0, _ := ret[0].([]*domain.Film)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllFilms indicates an expected call of GetAllFilms.
func (mr *MockFilmRepositoryMockRecorder) GetAllFilms(ctx, sortBy, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllFilms", reflect.TypeOf((*MockFilmRepository)(nil).GetAllFilms), ctx, sortBy, order)
}

// SearchFilms mocks base method.
func (m *MockFilmRepository) SearchFilms(ctx context.Context, fragment string) ([]*domain.Film, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchFilms", ctx, fragment)
	ret0, _ := ret[0].([]*domain.Film)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchFilms indicates an expected call of SearchFilms.
func (mr *MockFilmRepositoryMockRecorder) SearchFilms(ctx, fragment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchFilms", reflect.TypeOf((*MockFilmRepository)(nil).SearchFilms), ctx, fragment)
}

// UpdateFilm mocks base method.
func (m *MockFilmRepository) UpdateFilm(ctx context.Context, film *domain.Film) (*domain.Film, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFilm", ctx, film)
	ret0, _ := ret[0].(*domain.Film)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFilm indicates an expected call of UpdateFilm.
func (mr *MockFilmRepositoryMockRecorder) UpdateFilm(ctx, film interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFilm", reflect.TypeOf((*MockFilmRepository)(nil).UpdateFilm), ctx, film)
}

// UpdateFilmActors mocks base method.
func (m *MockFilmRepository) UpdateFilmActors(ctx context.Context, id int, actorsId []int) (*domain.Film, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFilmActors", ctx, id, actorsId)
	ret0, _ := ret[0].(*domain.Film)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFilmActors indicates an expected call of UpdateFilmActors.
func (mr *MockFilmRepositoryMockRecorder) UpdateFilmActors(ctx, id, actorsId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFilmActors", reflect.TypeOf((*MockFilmRepository)(nil).UpdateFilmActors), ctx, id, actorsId)
}
